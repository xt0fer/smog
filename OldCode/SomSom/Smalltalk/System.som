"

$Id: System.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

System = (

    "Accessing"
    global: name            = primitive
    global: name put: value = primitive
    hasGlobal: name         = primitive

    "Initializing"
    initialize: arguments = (
        | application |

        "Make sure we have got at least one argument"
        (arguments length < 1) ifTrue: [ 'No class specified' println. ^nil ].

        "Load the class with the specified name, create an instance of it, and
         run it. If there is more than only the class given on the command line,
         and the class has a method #run:, the arguments array is passed to it,
         otherwise, #run is sent."
        application := (self resolve: (arguments at: 1) asSymbol) new.

        ^ (application respondsTo: #run:)
            ifTrue:  [ application run: arguments ]
            ifFalse: [ application run ]
    )

    "File support"

    "Load a file identified by a path. Return content as a string"
    loadFile: fileName = primitive

    "Loading and resolving"
    load:    symbol = primitive
    resolve: symbol = (
        | class |

        "Check if we've already got the global"
        (self global: symbol) == nil ifFalse: [ ^self global: symbol ].

        "Try loading the class"
        class := self load: symbol.
        (class == nil) ifFalse: [
            ^class ].
        self error: 'Tried loading \'' + symbol + '\' as a class, but failed.'
    )

    "Exiting"
    exit: error  = primitive
    exit         = ( self exit: 0 )

    "Printing"
    printString: string = primitive
    printNewline        = primitive

    errorPrintln = ( self errorPrintln: '' )
    errorPrintln: string = primitive
    errorPrint: string  = primitive

    printStackTrace = primitive

    "Time"
    time  = primitive
    ticks = primitive      "returns the microseconds since start"

    "Force Garbage Collection"
    fullGC = primitive
    
    "To be implemented by SOM implementations that gather such statistics."
    gcStats = ( ^ #(
        0 "Total number of GCs"
        0 "Estimated total GC time in milliseconds"
        0 "Approximate number of allocated bytes of current thread") )  
    totalCompilationTime = ( ^ 0 "Estimated total compilation time in milliseconds" )

    ----------------------------------

    "Allocation"
    new = ( self error: 'The system object is singular' )

)
