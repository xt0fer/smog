"
Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

BenchmarkHarness = (

    "The BenchmarkHarness can be invoked on the command line and should be
    passed a list of benchmarks to run (class names) as arguments. It will
    run each of them and output single as well as a total."
    
    | total benchmarkClass numIterations innerIterations printAll doGC |
    
    benchmarkClass: class = ( benchmarkClass := class )
    printAll: aBool = ( printAll := aBool )

    numIterations: anInt = (numIterations := anInt)
    
    total = ( ^ total )
    
    run: args = (
        args length < 2 ifTrue: [ ^ self printUsage ].
        
        self initialize.
        self processArguments: args.

        self runBenchmark.
        self printTotal.
    )
    
    initialize = (
        total         := 0.
        numIterations := 1.
        innerIterations := 1.
        printAll      := true.
        doGC          := false.
    )
    
    printUsage = (
      './som.sh -cp Smalltalk Examples/Benchmarks/BenchmarkHarness.som [--gc-between-iterations|-gc] benchmark [num-iterations [inner-iter]]' println.
      '' println.
      '  --gc-between-iterations | --gc  - trigger a full GC between benchmark iteratons' println.
      '  benchmark      - benchmark class name (e.g., Queens, Fibonacci, Dispatch)' println.
      '  num-iterations - number of times to execute benchmark, default: 1' println.
      '  inner-iter     - number of times the benchmark is executed in an inner loop, ' println.
      '                   which is measured in total, default: 1' println.
    )
    
    processArguments: args = (
        | v arg |
        v := Vector new: args length.
        v appendAll: args.
        
        "First argument is the BenchmarkHarness"
        v removeFirst.
        
        arg := v removeFirst.
        (arg = '--gc-between-iterations' or: [arg = '--gc'])
          ifTrue: [
            doGC := true.
            arg := v removeFirst ].
        
        self loadBenchmarkClass: arg. 
        v size > 0 ifTrue: [
          arg := v removeFirst.
          numIterations := arg asInteger.
          v size > 0 ifTrue: [
            arg := v removeFirst.
            innerIterations := arg asInteger ] ]
    )
    
    loadBenchmarkClass: className = (
        | sym cls |
        sym := className asSymbol.
        cls := system load: sym.
        cls ifNil: [
            self error: 'Failed loading benchmark: ' + className ].
        benchmarkClass := cls.
    )
        
    runBenchmark = (
        | bench result |
        bench := benchmarkClass new.
        bench oneTimeSetup.
        
        ('Starting ' + bench name + ' benchmark.') println.
        result := self doRuns: bench.
        total := total + result.
        self reportBenchmark: bench result: result.

        '' println
    )
    
    doRuns: bench = (
        | i total |
        i := 0.
        total := 0.
    
        [ i < numIterations ] whileTrue: [
            | startTime endTime runTime endGcStats startGcStats startCompTime endCompTime |
            startGcStats  := system gcStats.
            startCompTime := system totalCompilationTime.
            startTime     := system ticks.

            (bench innerBenchmarkLoop: innerIterations) ifFalse: [
              self error: 'Benchmark failed with incorrect result'. ].

            endTime     := system ticks.
            endGcStats  := system gcStats.
            endCompTime := system totalCompilationTime.

            runTime := endTime - startTime.
            printAll ifTrue: [
              self print: bench run: runTime startGc: startGcStats endGc: endGcStats compileTime: endCompTime - startCompTime ].
        
            total := total + runTime.
            i := i + 1.

            doGC ifTrue: [
              system fullGC ] ].
    
        ^ total
    )
    
    reportBenchmark: bench result: result = (
        bench name print.
        ': iterations=' print.
        numIterations print.
        ' average: ' print.
        (result / numIterations) print.
        'us' print.
        ' total: ' print.
        result print.
        'us' println.
    )
     
    print: bench run: runTime startGc: startGc endGc: endGc compileTime: compTime = (
        bench name print. ': GC count:     ' print. (((endGc) at: 1) - ((startGc) at: 1)) print. 'n' println.
        bench name print. ': GC time:      ' print. (((endGc) at: 2) - ((startGc) at: 2)) print. 'ms' println.
        bench name print. ': Allocated:    ' print. (((endGc) at: 3) - ((startGc) at: 3)) print. 'bytes' println.
        bench name print. ': Compile time: ' print. compTime print. 'ms' println.

        bench name print. ': iterations=1 runtime: ' print. runTime print. 'us' println
    )
        
    printTotal = (
        ('Total Runtime: ' + total asString + 'us') println.
    )
)
