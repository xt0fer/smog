OrderedCollection = Vector (
    add: elem = (
        ^ self append: elem
    )
    
    addLast: elem = (
        ^ self append: elem
    )
    
    remove: obj ifAbsent: aBlock = (
        (self remove: obj) ifFalse: aBlock
    )
    
    " private "
    insert: anObject before: spot = (
        "spot is an index in the range firstIndex .. lastIndex,
         such an index is not known from outside the collection. 
         Never use this method in your code, it is meant for private use by
         OrderedCollection only.
         The methods for use are:
            #add:before:   to insert an object before another object
            #add:beforeIndex:   to insert an object before a given position. "
        | delta spotIndex |
        spotIndex := spot.
        delta := spotIndex - first.
        first = 1 ifTrue: [
            self makeRoomAtFirst.
            spotIndex := first + delta].
        first := first - 1.
        storage
            replaceFrom: first
            to: spotIndex - 2
            with: storage
            startingAt: first + 1.
        storage at: spotIndex - 1 put: anObject.
        ^ anObject
    )
    
    makeRoomAtFirst = (
        "Make some empty slots at the front of the array.
         If we have more than 50% free space, then just move the elements,
         so that the first 50% of the slots are free, otherwise add new free
         slots to the front by growing. Precondition: firstIndex = 1"
    
        | tally newFirstIndex newLastIndex |
        tally := self size.
        tally * 2 >= storage length ifTrue: [ ^self growAtFirst ].
        tally = 0 ifTrue: [ ^self resetTo: storage length + 1 ].
        newFirstIndex := storage length // 2 + 1.
        newLastIndex := newFirstIndex - first + last - 1.
        0 to: tally - 1 do: [ :offset |
            storage at: newLastIndex - offset put: (storage at: last - offset - 1) ].
        storage from: first to: newFirstIndex - 1 put: nil.
        first := newFirstIndex.
        last := newLastIndex + 1
    )
    
    resetTo: index = (
        first := index.
        last  := first
    )
    
    sort: i to: j with: sortBlock = (
        "Sort elements i through j of self to be nondescending according to
        sortBlock."
    
        | di dij dj tt ij k l n |
        sortBlock ifNil: [^self defaultSort: i to: j].
        "The prefix d means the data at that index."
        (n := j + 1  - i) <= 1 ifTrue: [^self]. "Nothing to sort."
         "Sort di,dj."
        di := storage at: i.
        dj := storage at: j.
        (sortBlock value: di with: dj) "i.e., should di precede dj?"
            ifFalse:
                [storage swap: i with: j.
                 tt := di.
                 di := dj.
                 dj := tt].
        n > 2
            ifTrue:  "More than two elements."
                [ij := (i + j) / 2.  "ij is the midpoint of i and j."
                 dij := storage at: ij.  "Sort di,dij,dj.  Make dij be their median."
                 (sortBlock value: di with: dij) "i.e. should di precede dij?"
                   ifTrue:
                    [(sortBlock value: dij with: dj) "i.e., should dij precede dj?"
                      ifFalse:
                        [storage swap: j with: ij.
                         dij := dj]]
                   ifFalse:  "i.e. di should come after dij"
                    [storage swap: i with: ij.
                     dij := di].
                n > 3
                  ifTrue:  "More than three elements."
                    ["Find k>i and l<j such that dk,dij,dl are in reverse order.
                    Swap k and l.  Repeat this procedure until k and l pass each other."
                     k := i.
                     l := j.
                     [[l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]
                       whileTrue.  "i.e. while dl succeeds dij"
                      [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]
                       whileTrue.  "i.e. while dij succeeds dk"
                      k <= l]
                       whileTrue:
                        [storage swap: k with: l].
        "Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
        through dj.  Sort those two segments."
                    self sort: i to: l with: sortBlock.
                    self sort: k to: j with: sortBlock]] )

    sort: aBlock = (
        "Make the argument, aBlock, be the criterion for ordering elements of the
        receiver."
    
        "sortBlocks with side effects may not work right"
        self size > 0 ifTrue: [
          self sort: first
                 to: last - 1
               with: aBlock
        ]
    )
    
    
    
    ----
    
    with: anElement = (
        | col |
        col := self new: 10.
        col append: anElement.
        ^ col
    )
)