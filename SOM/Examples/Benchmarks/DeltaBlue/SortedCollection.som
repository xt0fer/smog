SortedCollection = OrderedCollection (

    | sortBlock |

    indexForInserting: newObject = (
        | index low high |
        low  := first.
        high := last - 1.
        
        sortBlock isNil
            ifTrue: [[index := high + low / 2.  low > high]
                whileFalse:
                    [((storage at: index) <= newObject)
                        ifTrue: [low := index + 1]
                        ifFalse: [high := index - 1]]]
            ifFalse: [[index := high + low / 2.  low > high]
                whileFalse:
                    [(sortBlock value: (storage at: index) with: newObject)
                        ifTrue: [low := index + 1]
                        ifFalse: [high := index - 1]]].
        ^low )

    sort: i to: j = (
        "Sort elements i through j of self to be nondescending according to
        sortBlock."
    
        | di dij dj tt ij k l n |
        sortBlock ifNil: [^self defaultSort: i to: j].
        "The prefix d means the data at that index."
        (n := j + 1  - i) <= 1 ifTrue: [^self]. "Nothing to sort."
         "Sort di,dj."
        di := storage at: i.
        dj := storage at: j.
        (sortBlock value: di with: dj) "i.e., should di precede dj?"
            ifFalse:
                [storage swap: i with: j.
                 tt := di.
                 di := dj.
                 dj := tt].
        n > 2
            ifTrue:  "More than two elements."
                [ij := (i + j) / 2.  "ij is the midpoint of i and j."
                 dij := storage at: ij.  "Sort di,dij,dj.  Make dij be their median."
                 (sortBlock value: di with: dij) "i.e. should di precede dij?"
                   ifTrue:
                    [(sortBlock value: dij with: dj) "i.e., should dij precede dj?"
                      ifFalse:
                        [storage swap: j with: ij.
                         dij := dj]]
                   ifFalse:  "i.e. di should come after dij"
                    [storage swap: i with: ij.
                     dij := di].
                n > 3
                  ifTrue:  "More than three elements."
                    ["Find k>i and l<j such that dk,dij,dl are in reverse order.
                    Swap k and l.  Repeat this procedure until k and l pass each other."
                     k := i.
                     l := j.
                     [[l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]
                       whileTrue.  "i.e. while dl succeeds dij"
                      [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]
                       whileTrue.  "i.e. while dij succeeds dk"
                      k <= l]
                       whileTrue:
                        [storage swap: k with: l].
        "Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
        through dj.  Sort those two segments."
                    self sort: i to: l.
                    self sort: k to: j]] )

    addAll: aCollection = (
        aCollection size > (self size / 3)
            ifTrue:
                [aCollection do: [:each | self addLast: each].
                self reSort]
            ifFalse: [aCollection do: [:each | self add: each]].
        ^ aCollection )

    reSort = (
        self sort: first
               to: last - 1
    )

    sortBlock: aBlock = (
        "Make the argument, aBlock, be the criterion for ordering elements of the
        receiver."
    
        sortBlock := aBlock.
        "sortBlocks with side effects may not work right"
        self size > 0 ifTrue: [self reSort] )

    copyEmpty = (
        "Answer a copy of the receiver without any of the receiver's elements."
    
        ^self species sortBlock: sortBlock )

    addFirst: newObject = (
        self shouldNotImplement )

    insert: anObject before: spot = (
        self shouldNotImplement )

    defaultSort: i to: j = (
        "Sort elements i through j of self to be nondescending according to
        sortBlock." "Assume the default sort block ([:x :y | x <= y])."
    
        | di dij dj tt ij k l n |
        "The prefix d means the data at that index."
        (n := j + 1  - i) <= 1 ifTrue: [^self]. "Nothing to sort."
         "Sort di,dj."
        di := storage at: i.
        dj := storage at: j.
        (di <= dj) "i.e., should di precede dj?"
            ifFalse:
                [storage swap: i with: j.
                 tt := di.
                 di := dj.
                 dj := tt].
        n > 2
            ifTrue:  "More than two elements."
                [ij := (i + j) / 2.  "ij is the midpoint of i and j."
                 dij := storage at: ij.  "Sort di,dij,dj.  Make dij be their median."
                 (di <= dij) "i.e. should di precede dij?"
                   ifTrue:
                    [(dij <= dj) "i.e., should dij precede dj?"
                      ifFalse:
                        [storage swap: j with: ij.
                         dij := dj]]
                   ifFalse:  "i.e. di should come after dij"
                    [storage swap: i with: ij.
                     dij := di].
                n > 3
                  ifTrue:  "More than three elements."
                    ["Find k>i and l<j such that dk,dij,dl are in reverse order.
                    Swap k and l.  Repeat this procedure until k and l pass each other."
                     k := i.
                     l := j.
                     [[l := l - 1.  k <= l and: [dij <= (storage at: l)]]
                       whileTrue.  "i.e. while dl succeeds dij"
                      [k := k + 1.  k <= l and: [(storage at: k) <= dij]]
                       whileTrue.  "i.e. while dij succeeds dk"
                      k <= l]
                       whileTrue:
                        [storage swap: k with: l].
        "Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
        through dj.  Sort those two segments."
                    self defaultSort: i to: l.
                    self defaultSort: k to: j]] )

    should: a precede: b = (
        ^ sortBlock ifNil: [a <= b] ifNotNil: [sortBlock value: a with: b] )

    median = (
        "Return the middle element, or as close as we can get."
    
        ^ self at: self size + 1 / 2 )

    at: anInteger put: anObject = (
        self shouldNotImplement )

    add: newObject = (
        ^ super insert: newObject before: (self indexForInserting: newObject) )

    = aSortedCollection = (
        "Answer true if my and aSortedCollection's species are the same,
        and if our blocks are the same, and if our elements are the same."
    
        self species = aSortedCollection species ifFalse: [^ false].
        sortBlock = aSortedCollection sortBlock
            ifTrue: [^ super = aSortedCollection]
            ifFalse: [^ false] )

    collect: aBlock = (
        "Evaluate aBlock with each of my elements as the argument. Collect the
        resulting values into an OrderedCollection. Answer the new collection.
        Override the superclass in order to produce an OrderedCollection instead
        of a SortedCollection."
    
        | newCollection |
        newCollection := OrderedCollection new: self size.
        self do: [:each | newCollection addLast: (aBlock value: each)].
        ^ newCollection )

    sort: aSortBlock = (
        "Sort this storage using aSortBlock. The block should take two arguments
        and return true if the first element should preceed the second one."
    
        super sort: aSortBlock.
        sortBlock := aSortBlock )

    join: aCollection = (
        | result |
        "Curiously addAllLast: does not trigger a reSort, so we must do it here."
        result := super join: aCollection.
        result reSort.
        ^ result
    )

    sortTopologically = (
        "Plenty of room for increased efficiency in this one."
    
        | remaining result pick |
        remaining := self asOrderedCollection.
        result := OrderedCollection new.
        [remaining isEmpty] whileFalse: [
            pick := remaining select: [:item |
                remaining allSatisfy: [:anotherItem |
                    item == anotherItem or: [self should: item precede: anotherItem]]].
            pick isEmpty ifTrue: [self error: 'bad topological ordering'].
            result addAll: pick.
            remaining removeAll: pick].
        ^self copySameFrom: result )

    sortBlock = (
        "Answer the blockContext which is the criterion for sorting elements of
        the receiver."
    
        ^sortBlock )

    ----

    sortBlock: aBlock = (
        "Answer an instance of me such that its elements are sorted according to
        the criterion specified in aBlock."
    
        ^(super new: 10) sortBlock: aBlock )

)
