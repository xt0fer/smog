# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'codespeed.data'

reporting:
    codespeed:
        url: https://som-speed.stefan-marr.de/result/add/json/

runs:
    max_invocation_time: 6000

benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD "-cp Smalltalk:/home/smarr/.local/SOM/Examples/Benchmarks/Richards:/home/smarr/.local/SOM/Examples/Benchmarks/DeltaBlue:/home/smarr/.local/SOM/Examples/Benchmarks/NBody:/home/smarr/.local/SOM/Examples/Benchmarks/Json:/home/smarr/.local/SOM/Examples/Benchmarks/GraphSearch /home/smarr/.local/SOM/Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Richards:
                extra_args: "1 0 1"
                codespeed_name: "Richards [>"
            - DeltaBlue:
                extra_args: "1 0 1000"
                codespeed_name: "DeltaBlue [>"
            - Mandelbrot:
                extra_args: "1 0 300"
                codespeed_name: "Mandelbrot [>"
            - NBody:
                extra_args: "1 0 30000"
                codespeed_name: "NBody [>"
            - Json:
                extra_args: "1 0 80"
                codespeed_name: "Json [>"
            - GraphSearch:
                extra_args: "1 0 30"
                codespeed_name: "GraphSearch [>"
            - PageRank:
                extra_args: "1 0 1400"
                codespeed_name: "PageRank [>"

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        benchmarks:
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "Richards >]"
                warmup: 30
            - DeltaBlue:
                extra_args: "120 0 20000"
                codespeed_name: "DeltaBlue >]"
                warmup: 20
            - Mandelbrot:
                extra_args: "110 0 1000"
                codespeed_name: "Mandelbrot >]"
                warmup: 10
            - NBody:
                extra_args: "120 0 500000"
                codespeed_name: "NBody >]"
                warmup: 20
            - Json:
                extra_args: "120 0 80"
                codespeed_name: "Json >]"
                warmup: 20
            - GraphSearch:
                extra_args: "250 0 30"
                codespeed_name: "GraphSearch >]"
                warmup: 100
            - PageRank:
                extra_args: "120 0 1400"
                codespeed_name: "PageRank >]"
                warmup: 20

    micro-startup-100:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:/home/smarr/.local/SOM/Examples/Benchmarks/LanguageFeatures /home/smarr/.local/SOM/Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 100"
                codespeed_name: "Fibonacci 100x [>"
            - Dispatch:
                extra_args: "1 0 1000"
                codespeed_name: "Dispatch 100x [>"
            - Bounce:
                extra_args: "1 0 100"
                codespeed_name: "Bounce 100x [>"
            - Loop:
                extra_args: "1 0 500"
                codespeed_name: "Loop 100x [>"
            - Permute:
                extra_args: "1 0 50"
                codespeed_name: "Permute 100x [>"
            - Queens:
                extra_args: "1 0 50"
                codespeed_name: "Queens 100x [>"
            - List:
                extra_args: "1 0 50"
                codespeed_name: "List 100x [>"
            - Recurse:
                extra_args: "1 0 100"
                codespeed_name: "Recurse 100x [>"
            - Storage:
                extra_args: "1 0 20"
                codespeed_name: "Storage 100x [>"
            - Sieve:
                extra_args: "1 0 100"
                codespeed_name: "Sieve 100x [>"
            - BubbleSort:
                extra_args: "1 0 100"
                codespeed_name: "BubbleSort 100x [>"
            - QuickSort:
                extra_args: "1 0 20"
                codespeed_name: "QuickSort 100x [>"
            - Sum:
                extra_args: "1 0 500"
                codespeed_name: "Sum 100x [>"
            - Towers:
                extra_args: "1 0 20"
                codespeed_name: "Towers 100x [>"
            - TreeSort:
                extra_args: "1 0 10"
                codespeed_name: "TreeSort 100x [>"
            - IntegerLoop:
                extra_args: "1 0 400"
                codespeed_name: "IntegerLoop 100x [>"
            - FieldLoop:
                extra_args: "1 0 50"
                codespeed_name: "FieldLoop 100x [>"
            - WhileLoop:
                extra_args: "1 0 1000"
                codespeed_name: "WhileLoop 100x [>"

    micro-startup:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:/home/smarr/.local/SOM/Examples/Benchmarks/LanguageFeatures /home/smarr/.local/SOM/Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 3"
                codespeed_name: "Fibonacci [>"
            - Dispatch:
                extra_args: "1 0 20"
                codespeed_name: "Dispatch [>"
            - Bounce:
                extra_args: "1 0 2"
                codespeed_name: "Bounce [>"
            - Loop:
                extra_args: "1 0 10"
                codespeed_name: "Loop [>"
            - Permute:
                extra_args: "1 0 3"
                codespeed_name: "Permute [>"
            - Queens:
                extra_args: "1 0 2"
                codespeed_name: "Queens [>"
            - List:
                extra_args: "1 0 2"
                codespeed_name: "List [>"
            - Recurse:
                extra_args: "1 0 3"
                codespeed_name: "Recurse [>"
            - Storage:
                extra_args: "1 0 2"
                codespeed_name: "Storage [>"
            - Sieve:
                extra_args: "1 0 5"
                codespeed_name: "Sieve [>"
            - BubbleSort:
                extra_args: "1 0 3"
                codespeed_name: "BubbleSort [>"
            - QuickSort:
                extra_args: "1 0 3"
                codespeed_name: "QuickSort [>"
            - Sum:
                extra_args: "1 0 10"
                codespeed_name: "Sum [>"
            - Towers:
                extra_args: "1 0 2"
                codespeed_name: "Towers [>"
            - TreeSort:
                extra_args: "1 0 1"
                codespeed_name: "TreeSort [>"
            - IntegerLoop:
                extra_args: "1 0 8"
                codespeed_name: "IntegerLoop [>"
            - FieldLoop:
                extra_args: "1 0 3"
                codespeed_name: "FieldLoop [>"
            - WhileLoop:
                extra_args: "1 0 30"
                codespeed_name: "WhileLoop [>"

    micro-steady-100:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:/home/smarr/.local/SOM/Examples/Benchmarks/LanguageFeatures /home/smarr/.local/SOM/Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "Fannkuch 100x >]"
                warmup: 5
            - Fibonacci:
                extra_args: "60 0 1000"
                codespeed_name: "Fibonacci 100x >]"
                warmup: 10
            - Dispatch:
                extra_args: "55 0 10000"
                codespeed_name: "Dispatch 100x >]"
                warmup: 5
            - Bounce:
                extra_args: "60 0 4000"
                codespeed_name: "Bounce 100x >]"
                warmup: 10
            - Loop:
                extra_args: "55 0 10000"
                codespeed_name: "Loop 100x >]"
                warmup: 5
            - Permute:
                extra_args: "55 0 1500"
                codespeed_name: "Permute 100x >]"
                warmup: 5
            - Queens:
                extra_args: "55 0 1000"
                codespeed_name: "Queens 100x >]"
                warmup: 5
            - List:
                extra_args: "65 0 1000"
                codespeed_name: "List 100x >]"
                warmup: 15
            - Recurse:
                extra_args: "65 0 2000"
                codespeed_name: "Recurse 100x >]"
                warmup: 15
            - Storage:
                extra_args: "60 0 1000"
                codespeed_name: "Storage 100x >]"
                warmup: 10
            - Sieve:
                extra_args: "60 0 2500"
                codespeed_name: "Sieve 100x >]"
                warmup: 10
            - BubbleSort:
                extra_args: "60 0 3000"
                codespeed_name: "BubbleSort 100x >]"
                warmup: 10
            - QuickSort:
                extra_args: "60 0 2000"
                codespeed_name: "QuickSort 100x >]"
                warmup: 10
            - Sum:
                extra_args: "55 0 10000"
                codespeed_name: "Sum 100x >]"
                warmup: 5
            - Towers:
                extra_args: "55 0 1000"
                codespeed_name: "Towers 100x >]"
                warmup: 5
            - TreeSort:
                extra_args: "60 0 1000"
                codespeed_name: "TreeSort 100x >]"
                warmup: 10
            - IntegerLoop:
                extra_args: "55 0 8000"
                codespeed_name: "IntegerLoop 100x >]"
                warmup: 5
            - FieldLoop:
                extra_args: "55 0 900"
                codespeed_name: "FieldLoop 100x >]"
                warmup: 5
            - WhileLoop:
                extra_args: "55 0 9000"
                codespeed_name: "WhileLoop 100x >]"
                warmup: 5
    micro-steady:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:/home/smarr/.local/SOM/Examples/Benchmarks/LanguageFeatures /home/smarr/.local/SOM/Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fannkuch:
                extra_args: "14 0 6"
                codespeed_name: "Fannkuch >]"
                warmup: 4
            - Fibonacci:
                extra_args: "15 0 3"
                codespeed_name: "Fibonacci >]"
                warmup: 5
            - Dispatch:
                extra_args: "12 0 20"
                codespeed_name: "Dispatch >]"
                warmup: 2
            - Bounce:
                extra_args: "22 0 2"
                codespeed_name: "Bounce >]"
                warmup: 12
            - Loop:
                extra_args: "14 0 10"
                codespeed_name: "Loop >]"
                warmup: 4
            - Permute:
                extra_args: "16 0 3"
                codespeed_name: "Permute >]"
                warmup: 6
            - Queens:
                extra_args: "13 0 2"
                codespeed_name: "Queens >]"
                warmup: 3
            - List:
                extra_args: "16 0 2"
                codespeed_name: "List >]"
                warmup: 6
            - Recurse:
                extra_args: "14 0 3"
                codespeed_name: "Recurse >]"
                warmup: 4
            - Storage:
                extra_args: "17 0 2"
                codespeed_name: "Storage >]"
                warmup: 7
            - Sieve:
                extra_args: "18 0 5"
                codespeed_name: "Sieve >]"
                warmup: 8
            - BubbleSort:
                extra_args: "16 0 3"
                codespeed_name: "BubbleSort >]"
                warmup: 6
            - QuickSort:
                extra_args: "15 0 3"
                codespeed_name: "QuickSort >]"
                warmup: 5
            - Sum:
                extra_args: "20 0 10"
                codespeed_name: "Sum >]"
                warmup: 10
            - Towers:
                extra_args: "20 0 2"
                codespeed_name: "Towers >]"
                warmup: 10
            - TreeSort:
                extra_args: "15 0 1"
                codespeed_name: "TreeSort >]"
                warmup: 5
            - IntegerLoop:
                extra_args: "14 0 8"
                codespeed_name: "IntegerLoop >]"
                warmup: 4
            - FieldLoop:
                extra_args: "12 0 3"
                codespeed_name: "FieldLoop >]"
                warmup: 2
            - WhileLoop:
                extra_args: "13 0 30"
                codespeed_name: "WhileLoop >]"
                warmup: 3

executors:
    SOM:
        path: .
        executable: som.sh

    TruffleSOM-interpreter:
        path: . 
        executable: som.sh
    TruffleSOM-graal:
        path: . 
        executable: som
        args: "-E"

    TruffleSOM-interpreter-exp:
        path: . 
        executable: som.sh
    TruffleSOM-graal-exp:
        path: . 
        executable: som
        args: "-E"

    CSOM:
        path: .
        executable: CSOM
    SOMpp:
        path: .
        executable: som.sh
    PySOM:
        path: .
        executable: som.sh
    RPySOM-interpreter:
        path: .
        executable: RPySOM-no-jit
    RPySOM-jit:
        path: .
        executable: RPySOM-jit
    RTruffleSOM-interpreter:
        path: .
        executable: RTruffleSOM-no-jit
    RTruffleSOM-jit:
        path: .
        executable: RTruffleSOM-jit
        
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOM:
        description: All benchmarks on SOM (Java, bytecode-based)
        suites:
            - micro-startup-100
            - micro-steady-100
            - micro-startup
            - micro-steady
            - macro-startup
            - macro-steady
        executions:
            - SOM
    TruffleSOM:
        description: All benchmarks on TruffleSOM (Java, AST Interpreter)
        suites:
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- TruffleSOM-interpreter
            - TruffleSOM-graal
    TruffleSOM-exp:
        description: All benchmarks on TruffleSOM (Java, AST Interpreter)
        suites:
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- TruffleSOM-interpreter
            - TruffleSOM-graal-exp

    CSOM:
        description: All benchmarks on CSOM
        suites:
            - micro-startup
            - macro-startup
        executions:
            - CSOM
    SOMpp:
        description: All benchmarks on SOM++
        suites:
            - micro-startup
            - micro-startup-100
            - macro-startup
        executions:
            - SOMpp
    PySOM:
        description: All benchmarks on PySOM
        suites:
            - micro-startup
            - micro-steady
            - macro-startup
        executions:
            - PySOM
    RPySOM:
        description: All benchmarks on RPySOM
        suites:
            #- micro-startup
            #- micro-steady
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- RPySOM-interpreter
            - RPySOM-jit
    RTruffleSOM:
        description: All benchmarks on RTruffleSOM
        suites:
            #- micro-startup
            #- micro-steady
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- RTruffleSOM-interpreter
            - RTruffleSOM-jit
    RTruffleSOM-OMOP:
        description: All benchmarks on RTruffleSOM
        suites:
            #- micro-startup
            #- micro-steady
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- RTruffleSOM-interpreter
            - RTruffleSOM-jit
    TruffleSOM-OMOP:
        suites:
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            - TruffleSOM-graal
