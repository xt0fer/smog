"
This benchmark is based on the minimal-json Java library maintained at:
https://github.com/ralfstx/minimal-json

Original copyright information:

Copyright (c) 2013, 2014 EclipseSource

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE."
JsonParser = (
  | input index line column current captureBuffer captureStart exceptionBlock |
  
  initializeWith: string = (
    input := string.
    index := 0.
    line  := 1.
    column := 0.
    current := nil.
    captureBuffer := ''.
    captureStart  := -1.
  )

  parse = (
    | result |
    exceptionBlock := [:ex | ^ ex ].
    self read.
    self skipWhiteSpace.
    result := self readValue.
    self skipWhiteSpace.
    self isEndOfText ifFalse: [ self error: 'Unexpected character'].
    ^ result
  )

  readValue = (
    current = 'n' ifTrue: [ ^ self readNull   ].
    current = 't' ifTrue: [ ^ self readTrue   ].
    current = 'f' ifTrue: [ ^ self readFalse  ].
    current = '"' ifTrue: [ ^ self readString ].
    current = '[' ifTrue: [ ^ self readArray  ].
    current = '{' ifTrue: [ ^ self readObject ].
    
    "Is this really the best way to write this?, or better #or:?,
     but with all the nesting, it's just ugly."
    current = '-' ifTrue: [ ^ self readNumber ].
    current = '0' ifTrue: [ ^ self readNumber ].
    current = '1' ifTrue: [ ^ self readNumber ].
    current = '2' ifTrue: [ ^ self readNumber ].
    current = '3' ifTrue: [ ^ self readNumber ].
    current = '4' ifTrue: [ ^ self readNumber ].
    current = '5' ifTrue: [ ^ self readNumber ].
    current = '6' ifTrue: [ ^ self readNumber ].
    current = '7' ifTrue: [ ^ self readNumber ].
    current = '8' ifTrue: [ ^ self readNumber ].
    current = '9' ifTrue: [ ^ self readNumber ].
    
    "else"
    self expected: 'value'
  )

  readArrayElement: array = (
    self skipWhiteSpace.
    array add: self readValue.
    self skipWhiteSpace.
  )
  
  readArray = (
    | array |
    self read.
    array := JsonArray new.
    
    "Array might be empty"
    self skipWhiteSpace.
    (self readChar: ']') ifTrue: [
      ^ array
    ].
    
    self readArrayElement: array.
    [self readChar: ','] whileTrue: [
      self readArrayElement: array.
    ].

    (self readChar: ']') ifFalse: [
      self expected: '"," or "]"'
    ].
    ^ array
  )

  readObjectKeyValuePair: object = (
    | name |
    self skipWhiteSpace.
    name := self readName.
    self skipWhiteSpace.
  
    (self readChar: ':') ifFalse: [ self expected: ':' ].
  
    self skipWhiteSpace.
  
    object add: name with: self readValue.
  
    self skipWhiteSpace.
  )

  readObject = (
    | object |
    self read.
    object := JsonObject new.
    self skipWhiteSpace.

    (self readChar: '}') ifTrue: [
      ^ object
    ].
    
    self readObjectKeyValuePair: object.
    [self readChar: ','] whileTrue: [
      self readObjectKeyValuePair: object.
    ].
    
    (self readChar: '}') ifFalse: [
      self expected: '"," or "}"'
    ].
    
    ^ object
  )

  readName = (
    current = '"' ifFalse: [ self expected: 'name' ].
    ^ self readStringInternal
  )

  readNull = (
    self read.
    self readRequiredChar: 'u'.
    self readRequiredChar: 'l'.
    self readRequiredChar: 'l'.
    ^ JsonLiteral NULL
  )

  readTrue = (
    self read.
    self readRequiredChar: 'r'.
    self readRequiredChar: 'u'.
    self readRequiredChar: 'e'.
    ^ JsonLiteral TRUE
  )

  readFalse = (
    self read.
    self readRequiredChar: 'a'.
    self readRequiredChar: 'l'.
    self readRequiredChar: 's'.
    self readRequiredChar: 'e'.
    ^ JsonLiteral FALSE
  )

  readRequiredChar: ch = (
    (self readChar: ch) ifFalse: [
      self expected: 'character: ' + ch
    ]
  )

  readString = (
    ^ JsonString new: self readStringInternal
  )

  readStringInternal = (
    | string |
    self read.
    self startCapture.
    
    [current = '"'] whileFalse: [
      current = '\\' ifTrue: [
        self pauseCapture.
        self readEscape.
        self startCapture.
      ] ifFalse: [
        "if (current < 0x20) { throw expected('valid string character'); }"
        "we currently don't have a way to get the ordinal value for a character"
        "} else {"
        self read.
      ]
    ].
    string := self endCapture.
    self read.
    ^ string
  )

  readEscapeChar = (
    current = '"'  ifTrue: [ ^ '"'  ].
    current = '/'  ifTrue: [ ^ '/'  ].
    current = '\\' ifTrue: [ ^ '\\' ].

    current = 'b'  ifTrue: [ ^ '\b'  ].
    current = 'f'  ifTrue: [ ^ '\f'  ].
    current = 'n'  ifTrue: [ ^ '\n'  ].
    current = 'r'  ifTrue: [ ^ '\r'  ].
    current = 't'  ifTrue: [ ^ '\t'  ].

    "TODO: SOM doesn't have a way to create unicode characters."
    self expected: 'valid escape sequence. note, some are not supported'
  )

  readEscape = (
    self read.    
    captureBuffer := captureBuffer concatenate: self readEscapeChar.
    self read
  )

  readNumber = (
    | firstDigit |
    self startCapture.
    self readChar: '-'.
    firstDigit := current.
    
    self readDigit ifFalse: [ self expected: 'digit' ].
    firstDigit <> '0' ifTrue: [ [self readDigit] whileTrue: []].
        
    self readFraction.
    self readExponent.
    ^ JsonNumber new: self endCapture
  )

  readFraction = (
    (self readChar: '.') ifFalse: [ ^ false ].
    
    self readDigit ifFalse: [ self expected: 'digit' ].
    
    [self readDigit] whileTrue: [].

    ^ true
  )

  readExponent = (
    ((self readChar: 'e') not and: [
      (self readChar: 'E') not]) ifTrue: [ ^ false ].
    
    (self readChar: '+') ifFalse: [ self readChar: '-' ].
    
    self readDigit ifFalse: [ self expected: 'digit' ].

    [self readDigit] whileTrue: [].

    ^ true
  )

  readChar: ch = (
    current = ch ifFalse: [ ^ false ].
    self read.
    ^ true
  )

  readDigit = (
    self isDigit ifFalse: [ ^ false ].
    self read.
    ^ true
  )

  skipWhiteSpace = (
    [ self isWhiteSpace ]
      whileTrue:
        [ self read ].
  )

  read = (
    current = '\n' ifTrue: [
      line := line + 1.
      column := 0.
    ].
    
    index := index + 1.
    column := column + 1.

    input ifNil: [ self error:'input nil'].
    index <= input length
      ifTrue:  [ current := input charAt: index ]
      ifFalse: [ current := nil ]
  )

  startCapture = (
    captureStart := index
  )

  pauseCapture = (
    captureBuffer := captureBuffer concatenate: (
      input substringFrom: captureStart to: index - 1).
    captureStart := -1
  )

  endCapture = (
    | captured |
    '' = captureBuffer
      ifTrue:  [ captured := input substringFrom: captureStart to: index - 1 ]
      ifFalse: [
        self pauseCapture.
        captured := captureBuffer.
        captureBuffer := '' ].
    captureStart := -1.
    
    ^ captured
  )

  expected: expected = (
    self isEndOfText ifTrue: [
      self error: 'Unexpected end of input, expected ' + expected asString
    ].
    self error: 'Expected ' + expected
  )

  error: message = (
    "('error:' + message + ':' + line + ':' + column) println."
    exceptionBlock value: (ParseException with: message at: index
                                          line: line    column: column )
  )

  isWhiteSpace = (
    current = ' '  ifTrue: [^ true].
    current = '\t' ifTrue: [^ true].
    current = '\n' ifTrue: [^ true].
    current = '\r' ifTrue: [^ true].
    ^ false
  )

  isDigit = (
    current = '0' ifTrue: [^ true].
    current = '1' ifTrue: [^ true].
    current = '2' ifTrue: [^ true].
    current = '3' ifTrue: [^ true].
    current = '4' ifTrue: [^ true].
    current = '5' ifTrue: [^ true].
    current = '6' ifTrue: [^ true].
    current = '7' ifTrue: [^ true].
    current = '8' ifTrue: [^ true].
    current = '9' ifTrue: [^ true].
    ^ false
  )

  isEndOfText = (
    ^ current isNil
  )
  
  ----
  
  with: aJsonString = (
    ^ self new initializeWith: aJsonString
  )
)
