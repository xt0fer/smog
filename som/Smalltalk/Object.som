"

$Id: Object.som 27 2009-07-31 11:17:53Z michael.haupt $

Copyright (c) 2001-2007 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Object = nil (

    | class |
    
    "Accessing"
    class     = ( ^class )
    
    "Primitive size in bytes"
    objectSize = primitive
    
    "Comparing"
    =  other    = ( ^self == other )
    <> argument = ( ^(self = argument) not )
    == other    = primitive
    isNil       = ( ^false )
    " If you override =, you MUST override hashcode as well.  The rule
      obj1 = obj2   =>  obj1 hashcode = obj2 hashcode
      must be valid for all objects, or Hashtable will not work"
    
    "Converting"
    asString  = ( ^'instance of ' + (self class) )
    , element = ( ^(Vector new append: self) append: element )
    hashcode  = primitive
    
    "Evaluating"
    value     = ( ^self )
    
    "Printing"
    print     = ( self asString print )
    println   = ( self print. system printNewline )
    
    "Error handling"
    error: string = ( '' println. ('ERROR: ' + string) println. system exit )
    
    "Abstract method support"
    subclassResponsibility = (
        self error: 'This method is abstract and should be overridden'
    )
    
    "Error recovering"
    doesNotUnderstand: selector arguments: arguments = (
        self error:
            ('Method ' + selector + ' not found in class ' + class name)
    )
    
    escapedBlock: block = (
        self error: 'Block has escaped and cannot be executed'
    )
    
    unknownGlobal: name = ( ^system resolve: name )
    
    "Reflection"
    respondsTo: aSymbol = (
        (self class hasMethod: aSymbol)
            ifTrue:  [ ^true ]
            ifFalse: [ | cls |
                cls := self class superclass.
                [ cls isNil ] whileFalse: [
                    (cls hasMethod: aSymbol)
                        ifTrue:  [ ^true ]
                        ifFalse: [ cls := cls superclass ] ].
                ^ false ]
    )
    
)