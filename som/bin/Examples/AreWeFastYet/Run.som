"
Copyright (c) 2011-2016 see AUTHORS.md file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
Run = (
  | total numIterations innerIterations benchmarkSuite name doGC |

  initialize: aName = (
    name            := aName.
    benchmarkSuite  := self loadBenchmarkSuite: aName.
    total           := 0.
    numIterations   := 1.
    innerIterations := 1.
  )

  loadBenchmarkSuite: className = (
    | sym cls |
    sym := className asSymbol.
    cls := system load: sym.
    cls ifNil: [
        self error: 'Failed loading benchmark: ', className ].
    ^ cls
  )

  name: aString = ( name := aString )
  benchmarkSuite: aSuite = ( benchmarkSuite  := aSuite )
  numIterations:   anInt = ( numIterations   := anInt )
  innerIterations: anInt = ( innerIterations := anInt )
  doGC: aBool            = ( doGC := aBool )

  runBenchmark = (
    ('Starting ' + name + ' benchmark ... ') println.

    self doRuns: benchmarkSuite new.
    self reportBenchmark.

    '' println
  )

  measure: bench = (
    | startTime endTime runTime endGcStats startGcStats startCompTime endCompTime |
    startGcStats  := system gcStats.
    startCompTime := system totalCompilationTime.
    startTime     := system ticks.

    (bench innerBenchmarkLoop: innerIterations) ifFalse: [
      self error: 'Benchmark failed with incorrect result'. ].

    endTime     := system ticks.
    endGcStats  := system gcStats.
    endCompTime := system totalCompilationTime.

    runTime := endTime - startTime.
    self printResult: runTime startGc: startGcStats endGc: endGcStats compileTime: endCompTime - startCompTime.

    total := total + runTime.

    doGC ifTrue: [
      system fullGC ]
  )

  doRuns: bench = (
    1 to: numIterations do: [:i |
      self measure: bench
    ]
  )

  reportBenchmark = (
    (name + ': iterations=' + numIterations +
     ' average: ' + (total / numIterations) + 'us total: ' + total +
     'us\n') println.
  )

  printResult: runTime startGc: startGc endGc: endGc compileTime: compTime = (
    name print. ': GC count:     ' print. (((endGc) at: 1) - ((startGc) at: 1)) print. 'n' println.
    name print. ': GC time:      ' print. (((endGc) at: 2) - ((startGc) at: 2)) print. 'ms' println.
    name print. ': Allocated:    ' print. (((endGc) at: 3) - ((startGc) at: 3)) print. 'bytes' println.
    name print. ': Compile time: ' print. compTime print. 'ms' println.

    (name + ': iterations=1 runtime: ' + runTime + 'us') println
  )

  printTotal = (
    ('Total Runtime: ' + total + 'us') println.
  )

  ----

  new: name = (
    ^ self new initialize: name
  )
)
