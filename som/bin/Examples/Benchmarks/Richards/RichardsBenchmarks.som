RichardsBenchmarks = RBObject (
    |taskList currentTask currentTaskIdentity taskTable tracing layout queuePacketCount holdCount|

    createDevice: identity priority: priority work: work state: state = (
        | data |
        data := DeviceTaskDataRecord create.
        self
                createTask: identity
                priority: priority
                work: work
                state: state
                function: 
                        [:work :word |
                        | data functionWork | 
                        data := word.
                        functionWork := work.
                        RBObject NoWork == functionWork
                                ifTrue:
                                        [RBObject NoWork == (functionWork := data pending)
                                                ifTrue: [self wait]
                                                ifFalse: 
                                                        [data pending: RBObject NoWork.
                                                        self queuePacket: functionWork]]
                                ifFalse: 
                                        [data pending: functionWork.
                                        tracing
                                                ifTrue: 
                                                        [self trace: functionWork datum].
                                        self holdSelf]]
                data: data
    )

    createHandler: identity priority: priority work: work state: state = (
        | data |
        data := HandlerTaskDataRecord create.
        self
                createTask: identity
                priority: priority
                work: work
                state: state
                function: 
                        [:work :word | 
                        | data workPacket |
                        data := word.
                        RBObject NoWork == work
                                ifFalse: [RBObject WorkPacketKind == work kind 
                                        ifTrue: [data workInAdd: work]
                                        ifFalse: [data deviceInAdd: work]].
                        RBObject NoWork == (workPacket := data workIn)
                                ifTrue: [self wait]
                                ifFalse: 
                                        [ |count|
                                          count := workPacket datum.
                                        count > 4
                                                ifTrue: 
                                                        [data workIn: workPacket link.
                                                        self queuePacket: workPacket]
                                                ifFalse:
                                                        [ | devicePacket |
                                                          RBObject NoWork == (devicePacket := data deviceIn)
                                                                ifTrue: [self wait]
                                                                ifFalse: 
                                                                        [data deviceIn: devicePacket link.
                                                                        devicePacket datum: (workPacket data at: count).
                                                                        workPacket datum: count + 1.
                                                                        self queuePacket: devicePacket]]]]
                data: data
    )

    createIdler: identity priority: priority work: work state: state = (
        | data |
        data := IdleTaskDataRecord create.
        self
                createTask: identity
                priority: priority
                work: work
                state: state
                function: 
                        [:work :word | 
                        | data |
                        data := word.
                        data count: data count - 1.
                        0 = data count
                                ifTrue: [self holdSelf]
                                ifFalse:
                                        [0 = (data control & 1)
                                                ifTrue: 
                                                        [data control: data control / 2.
                                                        self release: RBObject DeviceA]
                                                ifFalse: 
                                                        [data control: (data control / 2 bitXor: 53256).
                                                        self release: RBObject DeviceB]]]
                data: data
    )

    createPacket: link identity: identity kind: kind = (
        ^Packet
                create: link
                identity: identity
                kind: kind
    )

    createTask: identity priority: priority work: work state: state function: aBlock data: data = (
        | t |

        t := TaskControlBlock
                                link: taskList
                                create: identity
                                priority: priority
                                initialWorkQueue: work
                                initialState: state
                                function: aBlock
                                privateData: data.
        taskList := t.
        taskTable at: identity put: t
    )

    createWorker: identity priority: priority work: work state: state = (
        | data |
        data := WorkerTaskDataRecord create.
        self
                createTask: identity
                priority: priority
                work: work
                state: state
                function: 
                        [:work :word |
                        | data | 
                        data := word.
                        RBObject NoWork == work
                                ifTrue: [self wait]
                                ifFalse: 
                                        [data destination: (RBObject HandlerA = data destination
                                                        ifTrue: [RBObject HandlerB]
                                                        ifFalse: [RBObject HandlerA]).
                                        work identity: data destination.
                                        work datum: 1.
                                        1 to: 4 do: 
                                                [:i | 
                                                data count: data count + 1.
                                                data count > 26 ifTrue: [data count: 1].
                                                "work data at: i put: $A asInteger + data count - 1]."
                                                work data at: i put: 65 + data count - 1].
                                        self queuePacket: work]]
                data: data
    )

    run = (
        RBObject initialize.
        self start.
    )

    start = (
        | workQ mark1 mark2 mark3 mark4|
        self initTrace.
        self initScheduler.
        mark1 := Time millisecondClockValue.
        Transcript show: 'Bench mark starting'.
        Transcript cr.
        self
                createIdler: RBObject Idler
                priority: 0
                work: RBObject NoWork
                state: TaskState running.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject Worker
                                kind: RBObject WorkPacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject Worker
                                kind: RBObject WorkPacketKind.
        self
                createWorker: RBObject Worker
                priority: 1000
                work: workQ
                state: TaskState waitingWithPacket.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        self
                createHandler: RBObject HandlerA
                priority: 2000
                work: workQ
                state: TaskState waitingWithPacket.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        self
                createHandler: RBObject HandlerB
                priority: 3000
                work: workQ
                state: TaskState waitingWithPacket.
        self
                createDevice: RBObject DeviceA
                priority: 4000
                work: RBObject NoWork
                state: TaskState waiting.
        self
                createDevice: RBObject DeviceB
                priority: 5000
                work: RBObject NoWork
                state: TaskState waiting.
        Transcript show: 'Starting'.
        Transcript cr.
        mark2 := Time millisecondClockValue.
        self schedule.
        mark3 := Time millisecondClockValue.
        Transcript show: 'Finished'.
        Transcript cr.
        Transcript show: 'QueuePacket count = '.
        Transcript show: queuePacketCount asString.
        Transcript show: ' HoldCount = '.
        Transcript show: holdCount asString.
        Transcript cr.
        Transcript show: 'These results are '.
        (((queuePacketCount = 23246) and: (holdCount = 9297))
            ifTrue: [Transcript show: 'correct']
            ifFalse: [Transcript show: 'wrong']).
        Transcript cr.
        Transcript show: 'End of run'.
        Transcript cr.
        mark4 := Time millisecondClockValue.
        Transcript show: '*****Scheduler time = '.
        Transcript show: (mark3 - mark2) asString.
        Transcript show: ' Total time = '.
        Transcript show: (mark4 - mark1) asString.
        Transcript cr
    )
    
    "This is start simply duplicated, removing all output and making the
     correctness check exiting with an error."
    reBenchStart = (
        | workQ |
        self initTrace.
        self initScheduler.

        self
                createIdler: RBObject Idler
                priority: 0
                work: RBObject NoWork
                state: TaskState running.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject Worker
                                kind: RBObject WorkPacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject Worker
                                kind: RBObject WorkPacketKind.
        self
                createWorker: RBObject Worker
                priority: 1000
                work: workQ
                state: TaskState waitingWithPacket.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceA
                                kind: RBObject DevicePacketKind.
        self
                createHandler: RBObject HandlerA
                priority: 2000
                work: workQ
                state: TaskState waitingWithPacket.
        workQ := self
                                createPacket: RBObject NoWork
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        workQ := self
                                createPacket: workQ
                                identity: RBObject DeviceB
                                kind: RBObject DevicePacketKind.
        self
                createHandler: RBObject HandlerB
                priority: 3000
                work: workQ
                state: TaskState waitingWithPacket.
        self
                createDevice: RBObject DeviceA
                priority: 4000
                work: RBObject NoWork
                state: TaskState waiting.
        self
                createDevice: RBObject DeviceB
                priority: 5000
                work: RBObject NoWork
                state: TaskState waiting.

        self schedule.

        ^ ((queuePacketCount = 23246) and: (holdCount = 9297))
    )


    findTask: identity = (
        | t |
        t := taskTable at: identity.
        RBObject NoTask == t ifTrue: [self error: 'findTask failed'].
        ^t
    )

    holdSelf = (
        holdCount := holdCount + 1.
        currentTask taskHolding: true.
        ^currentTask link
    )

    initScheduler = (
        queuePacketCount := 0.
        holdCount := 0.
        taskTable := Array new: 6 withAll: RBObject NoTask.
        taskList := RBObject NoTask
    )

    initTrace = (
        "    BinaryChoice 
        message: 'Trace?' 
        displayAt: Sensor mousePoint 
        centered: true 
        ifTrue: [tracing := true] 
        ifFalse: [tracing := false].
        "
        "does not work in V. 4"

        tracing := false.
        layout := 0
    )

    queuePacket: packet = (
        | t |
        t := self findTask: packet identity.
        RBObject NoTask == t ifTrue: [^RBObject NoTask].
        queuePacketCount := queuePacketCount + 1.
        packet link: RBObject NoWork.
        packet identity: currentTaskIdentity.
        ^t addInput: packet checkPriority: currentTask
    )

    release: identity = (
        | t |
        t := self findTask: identity.
        RBObject NoTask == t ifTrue: [^RBObject NoTask].
        t taskHolding: false.
        t priority > currentTask priority
                ifTrue: [^t]
                ifFalse: [^currentTask]
    )

    trace: id = (
        layout := layout - 1.
        0 >= layout
                ifTrue: 
                        [Transcript cr.
                        layout := 50].
        Transcript show: id asString
    )

    wait = (
        currentTask taskWaiting: true.
        ^currentTask
    )

    schedule = (
        currentTask := taskList. 
        [RBObject NoTask == currentTask]
                whileFalse: 
                        [currentTask isTaskHoldingOrWaiting
                                ifTrue: [currentTask := currentTask link]
                                ifFalse: 
                                        [currentTaskIdentity := currentTask identity.
                                        tracing ifTrue: [self trace: currentTaskIdentity].
                                        currentTask := currentTask runTask]]
    )

    ----

    start = (
        super new start
    )
)
