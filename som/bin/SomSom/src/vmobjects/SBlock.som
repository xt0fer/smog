SBlock = SAbstractObject (
  | method context blockClass |

  initialize: aSMethod in: aContext with: aBlockClass = (
    method := aSMethod.
    context := aContext.
    blockClass := aBlockClass.
  )

  method = (
    ^ method
  )

  context = (
    ^ context
  )

  somClassIn: universe = (
    ^ blockClass
  )

  "For using in debugging tools such as the Diassembler"
  debugString = ( ^ 'SBlock(' + method asString + ')' )

  ----

  new: aSMethod in: aContext with: aBlockClass = (
    ^ self new initialize: aSMethod in: aContext with: aBlockClass
  )

  evaluationPrimitive: numberOfArguments in: universe = (
    ^ SPrimitive new: (self computeSignatureString: numberOfArguments)
                  in: universe
                with: [:frame :interp |
        | rcvr context newFrame |
        "Get the block (the receiver) from the stack"
        rcvr := frame stackElement: numberOfArguments - 1.

        "Get the context of the block"
        context := rcvr context.

        "Push a new frame and set its context to be the one specified in
         the block"
        newFrame := interp pushNewFrame: rcvr method with: context.
        newFrame copyArgumentsFrom: frame ]
  )

  computeSignatureString: numberOfArguments = (
    | signatureString |
    signatureString := 'value'.
    numberOfArguments > 1 ifTrue: [
      signatureString := signatureString + ':' ].

    "Add extra with: selector elements if necessary"
    2 to: numberOfArguments - 1 do: [:i |
        signatureString := signatureString + 'with:' ].

    ^ signatureString
  )
)
